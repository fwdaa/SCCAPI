package aladdin.math.F2m;
import aladdin.math.*;

///////////////////////////////////////////////////////////////////////////
// Поле многочленов (F_{2^m}) в нормальном базисе
// Многочлен a(x) = a_0 alpha + a_1 alpha^2 + ... + a_{m-1} alpha^{2^{m-1}}
///////////////////////////////////////////////////////////////////////////
public class NormField extends Field
{
    private static final long serialVersionUID = 8611423914923325446L;    
    
    ///////////////////////////////////////////////////////////////////////
    // Типы нормальных базисов
    ///////////////////////////////////////////////////////////////////////
    private static final int[] DEFAULT_T = new int[] {
        0,  0,  2,  2,  1,  2,  2,  4,						/*    0 -    7 */
        0,  2,  1,  2,  1,  4,  2,  4,						/*    8 -   15 */
        0,  6,  2, 10,  3, 10,  3,  2,						/*   16 -   23 */
        0,  4,  2,  6,  1,  2,  2, 10,						/*   24 -   31 */
        0,  2,  9,  2,  1,  4,  6,  2,						/*   32 -   39 */
        0,  2,  5,  4,  9,  4,  3,  6,						/*   40 -   47 */
        0,  4,  2,  2,  1,  2,  3, 12,						/*   48 -   55 */
        0, 10,  1, 12,  1,  6,  6,  6,						/*   55 -   63 */
        0,  2,  1,  4,  9,  2,  3,  8,						/*   64 -   71 */
        0,  4,  2, 10,  3,  6,  7,  4,						/*   72 -   79 */
        0,  2,  1,  2,  5, 12,  2,  4,						/*   80 -   87 */
        0,  2,  2,  6,  3,  4,  3,  2,						/*   88 -   95 */
        0,  4,  2,  2,  1,  6,  6,  6,						/*   96 -  103 */
        0,  2,  1,  6,  5, 10,  6, 20,						/*  104 -  111 */
        0,  2,  5,  4,  3,  8,  6,  2,						/*  112 -  119 */
        0,  6,  6, 10,  3,  6,  3,  4,						/*  120 -  127 */
        0,  8,  1,  2,  5, 12,  2,  2,						/*  128 -  135 */
        0,  6,  1,  4,  3,  8,  6,  6,						/*  136 -  143 */
        0, 10,  2,  6,  1,  8, 19,  6,						/*  144 -  151 */
        0,  4, 25,  2, 13, 10,  2, 22,						/*  152 -  159 */
        0,  6,  1,  4,  5,  4,  3, 14,						/*  160 -  167 */
        0,  4,  6, 12,  1,  2,  2,  4,						/*  168 -  175 */
        0,  4,  1,  2,  1,  6,  3,  2,						/*  176 -  183 */
        0,  8,  2,  6,  5,  2, 10,  2,						/*  184 -  191 */
        0,  4,  2,  6,  1, 18, 22,  4,						/*  192 -  199 */
        0,  8,  6, 12,  3,  4,  3,  4,						/*  200 -  207 */
        0,  2,  2, 10,  5,  4,  3,  6,						/*  208 -  215 */
        0,  6,  5,  4,  3,  2, 10, 12,						/*  216 -  223 */
        0, 22,  1, 24,  9, 12,  2,  2,						/*  224 -  231 */ 
        0,  2,  5,  4,  3, 10,  7,  2,						/*  232 -  239 */ 
        0,  6,  6,  2,  3,  2, 11,  6,						/*  240 -  247 */ 
        0,  8,  9,  2,  3, 10,  2,  6,						/*  248 -  255 */ 
        0,  6,  5, 10,  5,  2,  3,  6,						/*  256 -  263 */ 
        0,  4,  6,  8,  1,  8,  2,  6,						/*  264 -  271 */ 
        0,  2,  9, 14,  3,  4,  2,  4,						/*  272 -  279 */ 
        0,  2,  6,  6,  3, 10,  3,  6,						/*  280 -  287 */ 
        0, 12,  5,  6,  1,  2,  3, 16,						/*  288 -  295 */ 
        0,  6,  6,  2, 19, 10,  3,  2,						/*  296 -  303 */ 
        0,  6,  2,  4, 15,  2,  6,  6,						/*  304 -  311 */ 
        0,  6,  5,  8,  1, 26, 11,  4,						/*  312 -  319 */ 
        0, 12,  6,  2,  5,  4,  2,  8,						/*  320 -  327 */ 
        0,  2,  2,  6,  3, 24,  7, 12,						/*  328 -  335 */ 
        0, 10,  2,  8,  3,  8,  6,  4,						/*  336 -  343 */ 
        0,  4,  1,  6,  1, 10,  2, 10,						/*  344 -  351 */ 
        0, 14,  2,  6,  3, 10, 10,  2,						/*  352 -  359 */ 
        0, 30,  5,  4,  3, 24, 22,  6,						/*  360 -  367 */ 
        0, 10,  6,  2,  1,  4,  3,  2,						/*  368 -  375 */ 
        0, 14,  2, 12,  5,  8,  6, 12,						/*  376 -  383 */ 
        0,  6,  2,  4,  1, 24,  3,  6,						/*  384 -  391 */ 
        0,  2,  9,  6, 11,  6,  2, 12,						/*  392 -  399 */ 
        0,  8,  5, 16,  3,  4,  6,  8,						/*  400 -  407 */
        0,  4,  2,  2,  3,  2,  2, 28,						/*  408 -  415 */ 
        0,  4,  1,  2,  1, 10, 11,  4,						/*  416 -  423 */
        0,  6,  2, 16,  5,  2,  3,  2,						/*  424 -  431 */ 
        0,  4,  9,  4, 13, 18,  2, 10,						/*  432 -  439 */
        0,  2,  1,  2,  5,  6,  6,  6,						/*  440 -  447 */ 
        0,  8, 13,  6, 11,  2, 19, 26,						/*  448 -  455 */
        0, 30,  6,  8,  1,  6, 10, 12,						/*  456 -  463 */ 
        0,  4,  1,  6, 21,  4,  2,  8,						/*  464 -  471 */
        0,  2,  5,  4,  5, 46,  7,  8,						/*  472 -  479 */ 
        0,  6,  5,  2,  3, 18, 10,  4,						/*  480 -  487 */
        0, 12,  1,  2, 13,  4,  3,  2,						/*  488 -  495 */ 
        0, 20,  9,  4, 11, 10, 10,  6,						/*  496 -  503 */
        0, 10,  5,  4,  1,  2,  3,  6,						/*  504 -  511 */ 
        0,  4, 33,  2,  3,  4, 14,  2,						/*  512 -  519 */
        0, 32,  1, 10,  5,  8,  3,  6,						/*  520 -  527 */ 
        0, 24,  2,  2,  3, 12,  7,  4,						/*  528 -  535 */
        0,  8,  6, 12,  1, 18,  3,  2,						/*  536 -  543 */ 
        0,  2,  1, 10,  5, 14,  7,  6,						/*  544 -  551 */
        0,  4,  2,  4,  1,  6,  2,  4,						/*  552 -  559 */ 
        0,  2,  1, 14,  3, 10,  3,  4,						/*  560 -  567 */
        0, 12,  5, 10,  5,  4,  3,  2,						/*  568 -  575 */ 
        0,  4,  6, 10,  3,  8,  3,  4,						/*  576 -  583 */
        0,  2,  1, 14, 11,  4, 11,  6,						/*  584 -  591 */ 
        0,  2, 17,  6,  3,  4, 15,  8,						/*  592 -  599 */
        0,  6,  5, 12,  7,  6,  2,  6,						/*  600 -  207 */ 
        0,  4, 10,  2,  1, 10,  2,  2,						/*  608 -  615 */
        0,  8,  2,  4,  3,  6,  3, 12,						/*  616 -  623 */ 
        0, 36, 21, 20,  7,  2, 14, 10,						/*  624 -  631 */
        0, 34, 13,  8, 13,  4,  2,  2,						/*  632 -  639 */ 
        0,  2,  6, 12,  3,  2,  6, 14,						/*  640 -  647 */
        0, 10,  2,  2,  1,  2, 14,  4,						/*  648 -  655 */ 
        0, 10,  1,  2,  1,  6,  3, 14,						/*  656 -  663 */
        0, 14, 22,  6, 11,  4,  6,  6,						/*  664 -  671 */ 
        0,  4,  5, 22,  1,  8, 10, 10,						/*  672 -  679 */
        0, 22,  6,  2,  3,  4,  2, 10,						/*  680 -  687 */ 
        0, 12,  2, 10,  5,  6,  3, 18,						/*  688 -  695 */
        0,  4,  5,  4,  1, 18, 14,  6,						/*  696 -  703 */ 
        0,  6, 21,  6,  1,  4,  3,  8,						/*  704 -  711 */
        0,  2,  5,  4,  5, 18, 15,  2,						/*  712 -  719 */ 
        0,  6, 26,  2, 13,  2,  2,  4,						/*  720 -  727 */
        0, 24, 13,  8, 11, 10,  3,  8,						/*  728 -  735 */ 
        0,  6,  5,  4,  3,  2, 15,  2,						/*  736 -  743 */
        0, 10,  2,  6,  7,  2, 14,  6,						/*  744 -  751 */ 
        0, 16, 10,  2,  1, 16,  6,  4,						/*  752 -  759 */
        0,  2, 10, 22,  3,  2,  6,  6,						/*  760 -  767 */ 
        0, 10,  5,  2,  1,  6,  2,  6,						/*  768 -  775 */
        0, 16, 21,  2, 13, 16,  3,  2,						/*  776 -  783 */ 
        0,  2,  1,  6, 11, 14,  3,  2,						/*  784 -  791 */
        0,  6, 14, 10,  1,  6,  6, 22,						/*  792 -  799 */ 
        0, 12,  6,  2,  5,  6, 11, 14,						/*  800 -  807 */
        0,  2,  2, 10,  3,  4, 15,  8,						/*  808 -  815 */ 
        0,  6,  2, 20,  1,  8,  3, 10,						/*  816 -  823 */
        0,  6,  1, 14,  1, 10, 14,  2,						/*  824 -  831 */ 
        0,  2,  2,  6, 15,  6,  7, 12,						/*  832 -  839 */
        0, 12,  5,  6, 13,  8,  2, 30,						/*  840 -  847 */ 
        0,  8,  6,  6,  1,  4, 18,  8,						/*  848 -  855 */
        0,  8,  1, 22,  9, 28, 31,  6,						/*  856 -  863 */ 
        0,  4,  2,  4, 19, 12,  2,  6,						/*  864 -  871 */
        0,  2,  9, 12,  1, 16, 15,  2,						/*  872 -  879 */ 
        0, 18,  1,  4, 27, 28,  3,  6,						/*  880 -  887 */
        0,  4,  5,  2,  3,  2,  3,  4,						/*  888 -  895 */ 
        0,  8, 21,  8, 11,  6,  3,  4,						/*  896 -  903 */
        0,  6,  1,  6, 21,  4, 18,  2,						/*  904 -  911 */ 
        0,  6, 18, 10,  3,  6, 10,  4,						/*  912 -  919 */
        0,  6, 10,  2,  5,  4,  6,  4,						/*  920 -  927 */ 
        0,  8,  2, 10,  3,  2,  3,  2,						/*  928 -  935 */
        0,  6,  2,  2,  1,  6, 10,  6,						/*  936 -  943 */ 
        0,  8,  1,  6,  7,  4,  2, 16,						/*  944 -  951 */
        0,  2, 49, 10, 15,  6,  6,  8,						/*  952 -  959 */ 
        0, 16, 14,  4,  9,  2,  7, 16,						/*  960 -  967 */
        0,  4,  9,  6,  5,  6,  2,  2,						/*  968 -  975 */ 
        0,  8,  6,  4,  9, 32, 15, 14,						/*  976 -  983 */
        0, 10,  2,  6,  7,  2, 10, 18,						/*  984 -  991 */ 
        0,  2, 10, 14, 43,  4,  2,  8,						/*  992 -  999 */
        0,  6,  5,  4,  5,  4,  3, 18,						/* 1000 - 1007 */ 
        0, 10,  5,  6,  3,  2,  2,  6,						/* 1008 - 1015 */
        0, 16,  1,  2,  9, 10,  3,  4,						/* 1016 - 1023 */ 
        0,  6,  2,  6, 17,  8,  7,  2,						/* 1024 - 1031 */
        0,  4,  2,  6,  7,  8,  6,  4,						/* 1032 - 1039 */ 
        0,  2, 18,  2,  7,  6,  6, 36,						/* 1040 - 1047 */
        0,  2, 10, 12,  5, 12,  3,  2,						/* 1048 - 1055 */ 
        0,  4, 14, 14,  1,  6,  3,  4,						/* 1056 - 1063 */
        0,  2,  6,  8,  7, 10,  2, 10,						/* 1064 - 1071 */ 
        0, 30, 13,  6,  3, 18,  6, 14,						/* 1072 - 1079 */
        0, 12,  9, 10,  3, 18,  7,  4,						/* 1080 - 1087 */ 
        0,  4,  1,  6, 15,  4, 15, 14,						/* 1088 - 1095 */
        0, 14,  9,  4,  5,  6,  3,  2,						/* 1096 - 1103 */ 
        0, 18,  2, 10,  1, 12,  2, 22,						/* 1104 - 1111 */
        0, 10, 22,  6,  1,  6,  2,  2,						/* 1112 - 1119 */ 
        0,  2,  1,  4,  3,  8,  7,  6,						/* 1120 - 1127 */
        0,  4,  5,  8, 13,  2,  2, 10,						/* 1128 - 1135 */ 
        0,  6,  6, 24,  5, 12, 23, 16,						/* 1136 - 1143 */
        0,  8,  2,  6,  5, 14, 19,  6,						/* 1144 - 1151 */ 
        0, 22,  2,  2,  3,  8,  6,  4,						/* 1152 - 1159 */
        0, 12,  9, 32,  9,  6,  2,  8,						/* 1160 - 1167 */ 
        0,  2,  1,  6,  3,  6,  7, 24,						/* 1168 - 1175 */
        0, 18,  2,  8, 21, 12,  3, 10,						/* 1176 - 1183 */ 
        0,  2,  1,  8, 19, 24,  3, 28,						/* 1184 - 1191 */
        0,  6,  2, 12, 17,  4,  7,  2,						/* 1192 - 1199 */ 
        0,  6,  5,  4,  3, 12,  6,  6,						/* 1200 - 1207 */
        0, 38,  9,  2,  1, 12,  3, 14,						/* 1208 - 1215 */ 
        0, 24,  2,  4,  5,  8,  6,  2,						/* 1216 - 1223 */
        0, 10,  5, 34,  1,  2,  3, 16,						/* 1224 - 1231 */ 
        0,  2, 25,  6,  1, 16,  2,  4,						/* 1232 - 1239 */
        0, 20,  5,  4,  3, 14,  6, 18,						/* 1240 - 1247 */ 
        0, 10, 18,  2, 19, 26, 10, 12,						/* 1248 - 1255 */
        0, 14,  1, 14,  7, 10,  6, 24,						/* 1256 - 1263 */ 
        0,  2, 17,  6, 17, 24,  6,  2,						/* 1264 - 1271 */
        0,  6,  2,  2,  1, 20,  2, 10,						/* 1272 - 1279 */ 
        0,  6,  1,  6,  3, 18,  6, 18,						/* 1280 - 1287 */
        0,  2,  1, 10,  3,  6,  7,  2,						/* 1288 - 1295 */ 
        0,  4,  5, 22,  1, 20,  3, 16,						/* 1296 - 1303 */
        0, 12,  1,  8,  7, 18,  2, 22,						/* 1304 - 1311 */
        0,  6,  5,  4,  5, 10,  7, 18,						/* 1312 - 1319 */
        0,  6,  6,  2, 15,  6,  7,  4,						/* 1320 - 1327 */
        0,  2,  9,  2, 11,  4,  3, 44,						/* 1328 - 1335 */
        0, 14,  2, 12,  3,  2,  3,  6,						/* 1336 - 1343 */
        0, 10,  2, 14,  7,  2, 11, 16,						/* 1344 - 1351 */
        0,  2, 18,  2,  5, 16, 11,  2,						/* 1352 - 1359 */
        0,  6, 14,  6,  3, 12,  3,  8,						/* 1360 - 1367 */
        0,  4,  2, 10,  1, 12,  7,  4,						/* 1368 - 1375 */
        0,  6,  6, 20,  1,  6,  6, 10,						/* 1376 - 1383 */
        0,  6, 17, 16, 11,  4, 10, 12,						/* 1384 - 1391 */
        0,  4,  2, 20, 13,  8,  2, 18,						/* 1392 - 1399 */
        0,  2,  9,  6,  7,  6,  3,  6,						/* 1400 - 1407 */
        0,  2, 42,  6, 29, 26,  3,  8,						/* 1408 - 1415 */
        0, 40,  2,  8,  3,  2, 10,  4,						/* 1416 - 1423 */
        0,  2,  1,  6, 21,  4,  2, 40,						/* 1424 - 1431 */
        0,  6,  9,  4, 11,  4,  6,  2,						/* 1432 - 1439 */
        0,  6,  5,  2, 13, 12,  6, 24,						/* 1440 - 1447 */
        0,  8,  1,  2,  1,  4,  2,  6,						/* 1448 - 1455 */
        0,  8, 22, 10, 11,  8, 10,  2,						/* 1456 - 1463 */
        0, 30,  5,  4, 19,  2,  6, 16,						/* 1464 - 1471 */
        0,  6,  9,  8, 25,  6,  2,  8,						/* 1472 - 1479 */
        0,  2,  1, 10, 17, 10, 15,  6,						/* 1480 - 1487 */
        0, 10,  5, 16,  1, 14,  3,  6,						/* 1488 - 1495 */
        0, 18,  1,  2,  7,  6,  3, 10,						/* 1496 - 1503 */
        0,  2, 10,  4,  5,  2, 10,  2,						/* 1504 - 1511 */
        0,  4,  9, 12,  3,  6,  2, 12,						/* 1512 - 1519 */
        0,  6,  1, 14,  5,  4, 11, 14,						/* 1520 - 1527 */
        0, 14,  1,  6,  3,  2,  3,  8,						/* 1528 - 1535 */
        0, 16,  5,  2,  3,  2, 11,  4,						/* 1536 - 1543 */
        0, 28,  6,  6,  1,  4,  3,  8,						/* 1544 - 1551 */
        0,  6, 10, 12, 11,  4,  6,  2,						/* 1552 - 1559 */
        0, 16, 21, 12,  7,  6,  6,  4,						/* 1560 - 1567 */
        0,  4,  1,  8, 25,  6,  3,  8,						/* 1568 - 1575 */
        0,  6, 25,  4,  5, 12, 18,  2,						/* 1576 - 1583 */
        0, 22, 18,  8,  7,  8,  7,  6,						/* 1584 - 1591 */
        0,  2,  9, 12,  3,  4, 11,  4,						/* 1592 - 1599 */
        0,  2,  6,  6,  3, 32,  7,  6,						/* 1600 - 1207 */
        0, 10,  6,  8, 15,  6,  7, 16,						/* 1608 - 1615 */
        0,  4,  1,  8,  1, 18,  6, 10,						/* 1616 - 1623 */
        0,  8,  2, 18,  9,  8,  7,  6,						/* 1624 - 1631 */
        0, 12,  5, 38,  1, 38, 10, 28,						/* 1632 - 1639 */
        0, 28,  9,  6,  3,  6, 15,  6,						/* 1640 - 1647 */
        0,  2,  6,  6,  3,  2,  7,  6,						/* 1648 - 1655 */
        0, 16,  5,  2,  7,  2,  3,  4,						/* 1656 - 1663 */
        0, 10,  1,  8,  1, 10,  3, 16,						/* 1664 - 1671 */
        0,  2, 33,  4, 17,  4,  6,  2,						/* 1672 - 1679 */
        0, 10,  6,  4,  7,  2,  3, 10,						/* 1680 - 1687 */
        0,  8,  6, 42,  1,  6, 15,  4,						/* 1688 - 1695 */
        0,  8, 10, 12,  3, 10,  3,  2,						/* 1696 - 1703 */
        0, 16,  2,  4,  9, 12, 18,  6,						/* 1704 - 1711 */
        0, 20,  9,  8, 17,  4, 11, 24,						/* 1712 - 1719 */
        0, 20, 14, 10, 27, 22,  3, 14,						/* 1720 - 1727 */
        0,  4,  2, 12,  1,  2,  2, 10,						/* 1728 - 1735 */
        0,  4,  6,  8,  1, 22,  3,  6,						/* 1736 - 1743 */
        0,  2,  1, 10,  5,  2,  6,  8,						/* 1744 - 1751 */
        0,  4,  9,  2, 21,  8,  2, 18,						/* 1752 - 1759 */
        0,  6,  9,  2,  5, 18,  2,  4,						/* 1760 - 1767 */
        0,  2, 14, 40,  5,  2,  3,  6,						/* 1768 - 1775 */
        0,  4,  2,  2, 15,  6, 11, 12,						/* 1776 - 1783 */
        0,  2,  1,  6, 15, 10,  2,  2,						/* 1784 - 1791 */
        0, 12,  5,  6, 21, 10,  6, 12,						/* 1792 - 1799 */
        0, 12,  5, 14,  3,  6,  2,  4,						/* 1800 - 1807 */
        0,  4,  6,  2, 13,  4,  3,  6,						/* 1808 - 1815 */
        0,  6,  2, 10,  9,  2, 18,  6,						/* 1816 - 1823 */
        0, 10,  6, 14,  9,  2, 18,  6,						/* 1824 - 1831 */
        0, 26, 10,  2,  5,  4,  2,  8,						/* 1832 - 1839 */
        0,  6, 25,  6,  5,  2,  7,  6,						/* 1840 - 1847 */
        0, 12,  2, 28,  3, 14,  2,  6,						/* 1848 - 1855 */
        0, 14,  6,  2,  1, 40,  6,  2,						/* 1856 - 1863 */
        0, 14,  2, 10,  5,  4, 10,  8,						/* 1864 - 1871 */
        0,  6,  5, 12,  1,  8,  7,  4,						/* 1872 - 1879 */
        0, 16, 25,  2,  5,  4,  3,  4,						/* 1880 - 1887 */
        0,  2,  9, 10,  5,  4,  3,  8,						/* 1888 - 1895 */
        0,  4,  2, 18,  1,  2, 35, 10,						/* 1896 - 1903 */
        0,  4,  1,  6, 25, 22, 11, 22,						/* 1904 - 1911 */
        0, 14, 10,  6,  3,  4, 10, 12,						/* 1912 - 1919 */
        0,  6,  9,  2,  7,  2,  2, 18,						/* 1920 - 1927 */
        0,  4,  1,  2,  5, 12, 14, 14,						/* 1928 - 1935 */
        0,  8,  2,  4, 11, 18,  3, 20,						/* 1936 - 1943 */
        0, 16,  6,  4,  1, 18,  3, 22,						/* 1944 - 1951 */
        0,  2, 10,  2,  3,  4,  2,  2,						/* 1952 - 1959 */
        0,  2, 50,  4, 29,  2,  7,  8,						/* 1960 - 1967 */
        0,  4,  5,  6,  1,  2,  3,  4,						/* 1968 - 1975 */
        0,  8,  1, 20,  5,  6, 11,  2,						/* 1976 - 1983 */
        0,  8,  1,  4,  5, 10,  7, 18,						/* 1984 - 1991 */
        0,  6,  2, 18,  1, 44, 19, 10						/* 1992 - 1999 */
    }; 
    ///////////////////////////////////////////////////////////////////////
    // Образующие элементы
    ///////////////////////////////////////////////////////////////////////
    private static final int[] DEFAULT_U = new int[] {
        0,     0,     4,     6,     1,    10,    12,    17, /*    0 -    7 */
        0,    18,     1,    22,     1,    23,    28,    11, /*    8 -   15 */
        0,    47,    36,    82,    13,   156,    29,    46, /*   16 -   23 */
        0,    10,    52,   105,     1,    58,    60,   305, /*   24 -   31 */
        0,    66,   287,    70,     1,    44,   135,    78, /*   32 -   39 */
        0,    82,    55,    93,    79,   162,    42,    45, /*   40 -   47 */
        0,   183,   100,   102,     1,   106,    58,   415, /*   48 -   55 */
        0,   465,     1,   618,     1,    84,    89,    52, /*   55 -   63 */
        0,   130,     1,   187,   467,   138,   196,    76, /*   64 -   71 */
        0,   155,   148,   182,    94,   442,   304,   114, /*   72 -   79 */
        0,   162,     1,   166,   377,   171,   172,   136, /*   80 -   87 */
        0,   178,   180,   507,   116,   269,   238,   190, /*   88 -   95 */
        0,   274,   196,   198,     1,   397,    66,   367, /*   96 -  103 */
        0,   210,     1,   466,   124,    79,   365,   137, /*  104 -  111 */
        0,   226,   387,   413,   226,   923,   482,   238, /*  112 -  119 */
        0,   446,   308,   830,   284,   679,    51,   208, /*  120 -  127 */
        0,   398,     1,   262,   197,  1312,   268,   270, /*  128 -  135 */
        0,   175,     1,   439,    20,  1098,   633,   261, /*  136 -  143 */
        0,   430,   292,   546,     1,   669,  2466,   385, /*  144 -  151 */
        0,   578,   563,   310,  1107,   179,   316,  1367, /*  152 -  159 */
        0,   143,     1,   504,    51,   555,   359,  1274, /*  160 -  167 */
        0,    26,   653,   960,     1,   346,   348,   135, /*  168 -  175 */
        0,    96,     1,   358,     1,   830,    40,   366, /*  176 -  183 */
        0,   826,   372,    34,   349,   378,    91,   382, /*  184 -  191 */
        0,   317,   388,   421,     1,  3256,  3951,   215, /*  192 -  199 */
        0,   355,   996,  2327,   547,   526,   252,   246, /*  200 -  207 */
        0,   418,   420,   708,   865,   520,   465,   945, /*  208 -  215 */
        0,  1208,    93,   151,   296,   442,  1622,  1176, /*  216 -  223 */
        0,  2925,     1,  3931,  1059,   671,   460,   462, /*  224 -  231 */
        0,   466,  1068,   844,   481,   817,   686,   478, /*  232 -  239 */
        0,   705,   760,   486,   425,   490,  2394,  1445, /*  240 -  247 */
        0,   960,  2183,   502,   729,  1858,   508,   647, /*  248 -  255 */
        0,   862,   855,  1921,   870,   522,   407,   640, /*  256 -  263 */
        0,   958,   223,   629,     1,  1907,   540,  1363, /*  264 -  271 */
        0,   546,  1165,  2932,   703,   755,   556,   903, /*  272 -  279 */
        0,   562,  1260,  1302,   632,   826,   260,  1682, /*  280 -  287 */
        0,  1354,   545,   372,     1,   586,   337,  2942, /*  288 -  295 */
        0,   194,  1637,   598,  1729,  1763,   384,   606, /*  296 -  303 */
        0,  1159,   612,   597,  3324,   618,   455,  1033, /*  304 -  311 */
        0,   489,   746,  1205,     1,  3925,  2840,  1164, /*  312 -  319 */
        0,   863,   592,   646,   307,    51,   652,   608, /*  320 -  327 */
        0,   658,   660,  1340,   304,  4066,   357,   770, /*  328 -  335 */
        0,  1485,   676,    60,   652,    66,  1856,   705, /*  336 -  343 */
        0,   366,     1,   450,     1,  2968,   700,   653, /*  344 -  351 */
        0,  3261,   708,   469,    86,   443,  3495,   718, /*  352 -  359 */
        0,  5850,   956,   497,   151,  6212,  5941,   286, /*  360 -  367 */
        0,  3048,  1678,   742,     1,  1061,  1089,   750, /*  368 -  375 */
        0,  2095,   756,  4276,  1126,  2003,  1304,  1842, /*  376 -  383 */
        0,  1429,   772,    88,     1,  1763,   750,  1285, /*  384 -  391 */
        0,   786,  2079,   465,  1851,  1104,   796,  2200, /*  392 -  399 */
        0,  2188,  1948,  2886,   995,   166,  2352,  2504, /*  400 -  407 */
        0,   316,   820,   822,   936,   826,   828,  5730, /*  408 -  415 */
        0,   220,     1,   838,     1,  1807,  1903,  1601, /*  416 -  423 */
        0,  2501,   852,  6503,   893,   858,   346,   862, /*  424 -  431 */
        0,  1323,  3176,    59,  5596,  6028,   876,  2128, /*  432 -  439 */
        0,   882,     1,   886,  1220,  2127,  1034,  2047, /*  440 -  447 */
        0,   799,  3249,  1328,  3763,   906,  8382,  1848, /*  448 -  455 */
        0,  6543,  2154,  1010,     1,   329,  4108,  4728, /*  456 -  463 */
        0,    61,     1,  2390,  7120,   137,   940,   728, /*  464 -  471 */
        0,   946,  1238,   218,    87,  8170,  2448,  3814, /*  472 -  479 */
        0,  2189,  2398,   966,   693,   297,  1601,  1360, /*  480 -  487 */
        0,  5581,     1,   982,   224,  1714,    38,   990, /*  488 -  495 */
        0,  7086,  4334,  1585,  4772,  3254,  3642,   240, /*  496 -  503 */
        0,  4031,   232,   992,     1,  1018,   646,   974, /*  504 -  511 */
        0,  1809,  1431,  1030,  1273,   164,  4842,  1038, /*  512 -  519 */
        0,   604,     1,  2181,  2501,  1649,   939,   537, /*  520 -  527 */
        0,  4496,  1060,  1062,  1374,   611,  3071,  1722, /*  528 -  535 */
        0,  2562,   915,  1601,     1,    94,  1362,  1086, /*  536 -  543 */
        0,  1090,     1,  1074,  1775,  2382,    88,    58, /*  544 -  551 */
        0,  1130,  1108,  1431,     1,  1425,  1116,  1216, /*  552 -  559 */
        0,  1122,     1,  1299,   433,  5405,   397,  1287, /*  560 -  567 */
        0,  1528,  2744,  4713,  2765,  1693,  1681,  1150, /*  568 -  575 */
        0,  1621,  1684,  2242,   356,  2124,   371,  2225, /*  576 -  583 */
        0,  1170,     1,  7556,  1743,  1724,  1301,  2385, /*  584 -  591 */
        0,  1186,  2209,   104,   152,   285,  5702,   192, /*  592 -  599 */
        0,  2208,  2058,  4876,  1595,  3296,  1212,   423, /*  600 -  207 */
        0,   398,  4378,  1222,     1,  1020,  1228,  1230, /*  608 -  615 */
        0,  4842,  1236,  1562,   454,  1189,   834,  5723, /*  616 -  623 */
        0,  3638,  3817,  6479,  2212,  1258,  8303,   538, /*  624 -  631 */
        0,  4436,  4330,  1284,  3266,   357,  1276,  1278, /*  632 -  639 */
        0,  1282,  2714,   205,   591,  1290,   225,  6941, /*  640 -  647 */
        0,  2578,  1300,  1302,     1,  1306,  5900,  2149, /*  648 -  655 */
        0,  2259,     1,  1318,     1,   889,   647,  2061, /*  656 -  663 */
        0,  2897,  9711,   823,  6929,   550,  2209,  2207, /*  664 -  671 */
        0,  1834,  2196, 11581,     1,  4438,    36,  4602, /*  672 -  679 */
        0,  4078,   903,  1366,   197,  2085,  1372,  2062, /*  680 -  687 */
        0,  1723,  1380,  1226,  1292,  1605,  1633,  5048, /*  688 -  695 */
        0,   167,  1231,  2194,     1, 11563,  5562,   113, /*  696 -  703 */
        0,   621, 14502,  3945,     1,  2421,  1662,  1660, /*  704 -  711 */
        0,  1426,  1259,  1202,   234,  1174,  5548,  1438, /*  712 -  719 */
        0,  3700, 16648,  1446,   495,  1450,  1452,   878, /*  720 -  727 */
        0, 12920,  3159,  3273,  5897,  4882,  1917,  3284, /*  728 -  735 */
        0,  4357,  3432,  1735,  1677,  1482,  4108,  1486, /*  736 -  743 */
        0,  4488,  1492,   506,  4633,  1498,  7877,   792, /*  744 -  751 */
        0,  8710,  2608,  1510,     1,  3449,  2805,  2756, /*  752 -  759 */
        0,  1522,  5731,  9759,  1303,  1530,   378,   180, /*  760 -  767 */
        0,  6688,  2809,  1542,     1,  3279,  1548,  3865, /*  768 -  775 */
        0,  1414, 13360,  1558,  4109,  6319,  1284,  1566, /*  776 -  783 */
        0,  1570,     1,   718,  6623,  5072,  1906,  1582, /*  784 -  791 */
        0,  1526,  1798,  2589,     1,  1746,  3110,  6197, /*  792 -  799 */
        0,  4901,  1889,  1606,  2708,    70,  2913,  7109, /*  800 -  807 */
        0,  1618,  1620,  2568,  2351,  1655,  4074,  5161, /*  808 -  815 */
        0,  2487,  1636,  1379,     1,  2508,   216,  3857, /*  816 -  823 */
        0,  2262,     1,  9424,     1,  4181,  7077,  1662, /*  824 -  831 */
        0,  1666,  1668,  2908,  8381,  4070,  4129,  9533, /*  832 -  839 */
        0,  3003,   872,  1913,  7710,  4977,  1692, 16194, /*  840 -  847 */
        0,    78,  3487,  4796,     1,  1942,   447,  5601, /*  848 -  855 */
        0,  5718,     1,  3173,  1450, 10664,  8282,  3682, /*  856 -  863 */
        0,  1453,  1732,  2466,  6544,  7550,  1740,   452, /*  864 -  871 */
        0,  1746,  2407,  5475,     1,  8500,  2281,  1758, /*  872 -  879 */
        0,  9779,     1,   548,  5966, 18909,   903,  4041, /*  880 -  887 */
        0,  2614,  4172,  1782,  1033,  1786,  2046,  3217, /*  888 -  895 */
        0,   976,  7689,  3092,  3571,  1043,  1379,  3528, /*  896 -  903 */
        0,  3898,     1,  2855,  4252,  2610,  5047,  1822, /*  904 -  911 */
        0,  2777,  3693,  4920,   595,  4574,  5636,  2368, /*  912 -  919 */
        0,  4651,   868,  1846,   513,  1279,  3730,  1609, /*  920 -  927 */
        0,  2291,  1860,  2405,  1100,  1866,   413,  1870, /*  928 -  935 */
        0,  2014,  1876,  1878,     1,   854,  4064,  4195, /*  936 -  943 */
        0,  4452,     1,  1111,  3360,   742,  1900,  8564, /*  944 -  951 */
        0,  1906, 40520,  1886,  5271,  5543,   331,  7587, /*  952 -  959 */
        0,  1114,  5840,  1305,  3721,  1930,  3981,  5467, /*  960 -  967 */
        0,  3375,  4949,  4477,  4442,  3985,  1948,  1950, /*  968 -  975 */
        0,   955,  5092,   835,  5312, 29851,  2570,  2877, /*  976 -  983 */
        0,  5340,  1972,  5495,  6019,  1978,  2290,  5028, /*  984 -  991 */
        0,  1986,  1771,  2423, 18087,   481,  1996,  4992, /*  992 -  999 */
        0,    78,  3616,  2783,  1379,  3298,   239,  7711, /* 1000 - 1007 */
        0,  3975,  3002,  5402,  2291,  2026,  2028,  5347, /* 1008 - 1015 */
        0,  3983,     1,  2038,  1563,  2204,  2093,  3034, /* 1016 - 1023 */
        0,   208,  2052,    79,  7065,  1074,  2599,  2062, /* 1024 - 1031 */
        0,   733,  2068,  6075,  2390,  4639,  5299,  2396, /* 1032 - 1039 */
        0,  2082, 16458,  2086,   119,  4251,  3969, 34978, /* 1040 - 1047 */
        0,  2098,  5209,    74,  4510, 11348,  2626,  2110, /* 1048 - 1055 */
        0,  2082, 12193,  9044,     1,  5598,  1871,  3692, /* 1056 - 1063 */
        0,  2130,  2295,  3445,   716,  1625,  2140,  5377, /* 1064 - 1071 */
        0,   205,  6522,   213,   914, 18631,  4993, 11632, /* 1072 - 1079 */
        0,  2439,  2761,  1625,  1813, 12561,  1034,  3741, /* 1080 - 1087 */
        0,  4291,     1,  2333,  1204,  1904,  2244,  3064, /* 1088 - 1095 */
        0,  8092,  6661,  3892,  4473,  1519,    57,  2206, /* 1096 - 1103 */
        0, 11246,  2212,  4034,     1, 10477,  2220, 21829, /* 1104 - 1111 */
        0, 10301, 13728,  2919,     1,  5223,  2236,  2238, /* 1112 - 1119 */
        0,  2242,     1,  2280,  2718,  2614,  3735,  2156, /* 1120 - 1127 */
        0,  1474,  4847,  7581,   960,  2266,  2268,  1106, /* 1128 - 1135 */
        0,  2686,   735, 25138,   999, 11652,  5045,  1814, /* 1136 - 1143 */
        0,  1227,  2292,   220,  1229,  4897, 17424,  1857, /* 1144 - 1151 */
        0,  5795,  2308,  2310,  1683,  6014,  1943,  2593, /* 1152 - 1159 */
        0,  4305,  5658, 33473,  2220,  1382,  2332,  1847, /* 1160 - 1167 */
        0,  2338,     1,  6504,   258,  6737,   663, 10102, /* 1168 - 1175 */
        0,  4793,  2356,  2117,  9661,  9019,  2384, 10470, /* 1176 - 1183 */
        0,  2370,     1,  8625,   419, 20268,  3467,  7651, /* 1184 - 1191 */
        0,  4279,  2388,  2556,  8624,  1481,  4957,  2398, /* 1192 - 1199 */
        0,  5369,   759,  1868,  1937, 12197,  1831,  3427, /* 1200 - 1207 */
        0, 39678,  6932,  2422,     1, 10551,   422,  1728, /* 1208 - 1215 */
        0,  9750,  2436,   719,  1774,  5629,  3063,  2446, /* 1216 - 1223 */
        0,  5127,  5111, 34122,     1,  2458,   474,  9327, /* 1224 - 1231 */
        0,  2466, 10554,   395,     1, 12316,  2476,   359, /* 1232 - 1239 */
        0,  7570,  3926,  4750,  2784, 14541,  3469, 15063, /* 1240 - 1247 */
        0, 10527,  5676,  2502,  1656, 30099,  2714, 11725, /* 1248 - 1255 */
        0,  3929,     1, 12558,  3694,  7095,  2058,  4831, /* 1256 - 1263 */
        0,  2530,  3054,  2095, 11770,    18,  4497,  2542, /* 1264 - 1271 */
        0,  2976,  2548,  2550,     1, 18822,  2556, 11745, /* 1272 - 1279 */
        0,  2275,     1,  5430,  1139, 17895,  4278, 20332, /* 1280 - 1287 */
        0,  2578,     1,  3414,  3652,  1760,  2118,  2590, /* 1288 - 1295 */
        0,  2743,  5791,   524,     1, 14651,    62,  9995, /* 1296 - 1303 */
        0,  3807,     1,  1425,   387,  5578,  2620, 12479, /* 1304 - 1311 */
        0,  6513,  4689,   827,  1928,  1390,  3739, 22478, /* 1312 - 1319 */
        0,  3760,  2006,  2646, 18867,  7630,  4369,  3505, /* 1320 - 1327 */
        0,  2658,  2809,  2662,  9361,  2630,  3180, 11395, /* 1328 - 1335 */
        0,  4866,  2676, 13681,  1812,  2682,  1820,  2766, /* 1336 - 1343 */
        0,  1136,  2692, 16962,  7074,  2698,  7343, 20156, /* 1344 - 1351 */
        0,  2706, 13984,  2710,  6745,  7361,  5866,  2718, /* 1352 - 1359 */
        0,  3093, 17213,  1097,   902,  8164,  2081,  8696, /* 1360 - 1367 */
        0,    74,  2740,  6167,     1,   886,  4289,  1115, /* 1368 - 1375 */
        0,  8023,  8112, 13779,     1,   569,  2051,  5698, /* 1376 - 1383 */
        0,  7045, 15145,  2568,  4726,  2478,  2393,  3254, /* 1384 - 1391 */
        0,  3556,  2788, 27330, 10485,  6841,  2796,  8909, /* 1392 - 1399 */
        0,  2802,  9524,  6458,  3628,  6284,  4106,  7408, /* 1400 - 1407 */
        0,  2818, 28923,  4280, 12609, 19533,   298,  7049, /* 1408 - 1415 */
        0, 13980,  2836, 10428,  2613,  2842,  8747,  4500, /* 1416 - 1423 */
        0,  2850,     1,  5740, 14914,  2416,  2860, 15543, /* 1424 - 1431 */
        0,  7394, 11733,  2378,   121,   806,  3307,  2878, /* 1432 - 1439 */
        0,   795,  2676,  2886,  6939, 16387,  7299, 14900, /* 1440 - 1447 */
        0,  3296,     1,  2902,     1,   796,  2908,  3659, /* 1448 - 1455 */
        0,  1969, 23009,  7555,  7498, 10488, 13145,  2926, /* 1456 - 1463 */
        0,  9567,  2449,  1042,  2591,  2938,  2437,  9439, /* 1464 - 1471 */
        0,  4373, 12021,  8934,   145,  7402,  2956,  5136, /* 1472 - 1479 */
        0,  2962,     1,   193,  4992,  6924, 14649,  5076, /* 1480 - 1487 */
        0,  1442,  3852, 13610,     1,  1701,   505,   342, /* 1488 - 1495 */
        0, 14368,     1,  2998,  8400,  7913,   791,  9501, /* 1496 - 1503 */
        0,  3010,  9855,  1801,  4933,  3018,   731,  3022, /* 1504 - 1511 */
        0,  2832,  4841,  2641,  2804,  4724,  3036, 10318, /* 1512 - 1519 */
        0,  6117,     1,  6905,  7496,   247,  3175,  1440, /* 1520 - 1527 */
        0,  4859,     1,  4122,  4219,  3066,   179, 10838, /* 1528 - 1535 */
        0,  5299,  6179,  3078,  1763,  3082, 12361,  2447, /* 1536 - 1543 */
        0, 13642,  8676,  6440,     1,  2007,  3864,   773, /* 1544 - 1551 */
        0,  3139, 15349, 12509, 11191,  1451,  5329,  3118, /* 1552 - 1559 */
        0, 18438, 16438,  3637,  1414,  8408,  6773,  4746, /* 1560 - 1567 */
        0,  5244,     1,   999, 16603,  8706,  4005,  9567, /* 1568 - 1575 */
        0,   608,  8462,  4354,  1850, 10340, 23716,  3166, /* 1576 - 1583 */
        0,  4491, 23020, 10246,  9319,  1532,  5842,  3269, /* 1584 - 1591 */
        0,  3186,  1269,  3987,  3109,  2092,  7313,  1302, /* 1592 - 1599 */
        0,  3202,  6527,  4427,  2924, 19564,   854,  5047, /* 1600 - 1207 */
        0,  7837,  8008,  6736, 10097,  6766, 10250, 24803, /* 1608 - 1615 */
        0,  2977,     1,  9639,     1, 27277,  8183,  6862, /* 1616 - 1623 */
        0,  4852,  3252, 12298, 10297,  6603,   895,  3032, /* 1624 - 1631 */
        0, 12279,  6493,  4958,     1, 58958,  8743, 13271, /* 1632 - 1639 */
        0, 41017,  3413,  4751,  2801,   652,  2487,  7347, /* 1640 - 1647 */
        0,  3298,  9802,  3336,  2674,  3306,   846,  5700, /* 1648 - 1655 */
        0, 20929,  3333,  3318,  9040,  3322,  3850,   752, /* 1656 - 1663 */
        0,  8479,     1,  4831,     1,  6744,  2103, 10396, /* 1664 - 1671 */
        0,  3346, 48311,  1721, 25905,  2150,  4706,  3358, /* 1672 - 1679 */
        0, 15265,  4960,  2217,  1945,  3370,  3146, 11661, /* 1680 - 1687 */
        0, 11450,  2186,  4446,     1,  4594, 19906,  5786, /* 1688 - 1695 */
        0,  6712, 16393,  1974,  3486,  9576,   311,  3406, /* 1696 - 1703 */
        0, 13755,  3412,  5233,  8082,  2583,  5715,   176, /* 1704 - 1711 */
        0, 14111, 13556,  3476, 18542,   998,  9108, 26853, /* 1712 - 1719 */
        0,  8144, 22852,  1711, 37240, 21574,  1497,  8220, /* 1720 - 1727 */
        0,  6654,  3460,  8973,     1,  3466,  3468, 13433, /* 1728 - 1735 */
        0,   932,  8015,  9670,     1, 22545,  4775,  9130, /* 1736 - 1743 */
        0,  3490,     1,  7484,  4626,  3498,  5771,   432, /* 1744 - 1751 */
        0,  4533,  7673,  3510, 12238, 13365,  3516,  9004, /* 1752 - 1759 */
        0,  9382, 14930,  3526,  6823, 10447,  3532,   188, /* 1760 - 1767 */
        0,  3538, 14238,  9169,  7989,  3546,  1282,  9667, /* 1768 - 1775 */
        0,  6805,  3556,  3558, 23138,  3654, 14297,  1815, /* 1776 - 1783 */
        0,  3570,     1,  1256, 14453,  8940,  3580,  3582, /* 1784 - 1791 */
        0,  8259,  5803,  3874, 24660,  2822,  3472, 15062, /* 1792 - 1799 */
        0, 18494,  6386, 20266,  1224,  3368,  3612,  3657, /* 1800 - 1807 */
        0,  2502,  6663,  3622, 10433,  5042,  2588,  1100, /* 1808 - 1815 */
        0,   479,  3636,  9752, 11373,  3642, 15076,  6543, /* 1816 - 1823 */
        0, 12943,  7812, 12669, 15165,  3658, 21575,  6629, /* 1824 - 1831 */
        0, 26106, 13623,  3670,  8062,  5288,  3676,  3230, /* 1832 - 1839 */
        0,  1692, 19920,  6753,  3835,  3690, 12771,  4378, /* 1840 - 1847 */
        0, 19808,  3700, 20694,  3729,  7278,  3708,   106, /* 1848 - 1855 */
        0, 21839,  4439,  3718,     1, 27544,  7136,  3726, /* 1856 - 1863 */
        0, 14446,  3732, 17522,  5824,  1652,  4943,  3847, /* 1864 - 1871 */
        0,  5673,  6116, 10058,     1,  4810, 10782,  4108, /* 1872 - 1879 */
        0,  2345,  9558,  3766,  1083,  2867,  4194,  4618, /* 1880 - 1887 */
        0,  3778,  4226, 13350,  8616,  3743,  4572, 12595, /* 1888 - 1895 */
        0,  3270,  3796, 27213,     1,  3802, 39913,  5465, /* 1896 - 1903 */
        0,  5583,     1,  8512, 23172, 24236,  6084, 31619, /* 1904 - 1911 */
        0,  9354,  1728,   387,  5418,  5377, 10098, 19406, /* 1912 - 1919 */
        0,  5518,  3619,  3846,  2092,  3850,  3852, 33090, /* 1920 - 1927 */
        0,  4764,     1,  3862,  6413, 11732, 24941, 16579, /* 1928 - 1935 */
        0,  5467,  3876,  6945,  9856, 24127,  1350, 27018, /* 1936 - 1943 */
        0, 24431,  9519,  4411,     1, 12020,  5273, 33842, /* 1944 - 1951 */
        0,  3906,  9760,  3910,   777,  5792,  3916,  3918, /* 1952 - 1959 */
        0,  3922, 70508,  1759, 12258,  3930,  6750, 15555, /* 1960 - 1967 */
        0,  7557,  4511,  8087,     1,  3946,  5494,  4555, /* 1968 - 1975 */
        0,  8408,     1, 10068,  7611,  7354, 11409,  3966, /* 1976 - 1983 */
        0,  8098,     1,  7270,  6090,  7574, 11508,  9855, /* 1984 - 1991 */
        0, 11194,  3988, 27461,     1,  9640,   440,  1329, /* 1992 - 1999 */
    }; 
    ///////////////////////////////////////////////////////////////////////
    // Сгенерировать число с указанным порядком
    ///////////////////////////////////////////////////////////////////////
    private static int generateOrder(int T, int p) 
    {
        // проверить корректность параметров
        if (((p - 1) % T) != 0) throw new IllegalArgumentException(); 
        
        // обработать тривиальный случай
        if (T == 1) return 1; for (int g = 2, u = g; g < p; g++, u = g)
        {
            // вычислить u = g^T
            for (int i = 1; i < T; i++) u = (int)(((long)u * g) % p); if (u == 1) return g; 
        }
        throw new IllegalArgumentException(); 
    }
    ///////////////////////////////////////////////////////////////////////
    // Сгенерировать образующие с указанным порядком
    ///////////////////////////////////////////////////////////////////////
    private static void calculateNormalBasis(int[] defaultT, int[] defaultU) 
    {
        // для всех размерностей
        for (int m = 0; m < defaultT.length; m++)
        {
            // проверить допустимость действий
            if (defaultT[m] == 0) { defaultU[m] = 0; continue; }
            
            // вычислить образующий элемент
            defaultU[m] = generateOrder(defaultT[m], defaultT[m] * m + 1); 
        }
        // для всех размерностей
        for (int m = 0; m < defaultT.length; m++)
        {
            // выполнить перевод строки
            if ((m % 8) == 0) System.out.println();
            
            // вывести значение образующего элемента
            System.out.print(String.format("%1$5d, ", defaultU[m]));
        }
        System.out.println();
    }
    ///////////////////////////////////////////////////////////////////////
    // матрица коэффициентов, тип нормального базиса и единичный элемент
    private final Matrix matrix; private final int T; private final Vector one;  

    // конструктор
    public NormField(int m) { this(m, DEFAULT_T[m], DEFAULT_U[m]); }
    // конструктор
    public NormField(int m, int T, int u) 
    {
        // создать список индексов
        super(m); this.T = T; int p = T * m + 1; int[] F = new int[p - 1];  
        
        // заполнить список индексов
        for (int j = 0, w = 1; j < T; j++, w = (u * w) % p)
        {
            // заполнить список индексов
            for (int i = 0, n = w; i < m; i++, n = (2 * n) % p) F[n - 1] = i;
        }
        // создать таблицу коэффициентов
        MatrixBuilder builder = new MatrixBuilder(m, m);  
        
        // обработать случай четного m
        if ((m & 1) == 0) for (int i = 0; i < m / 2; i++)
        {
            // установить значение битов
            builder.invert(0     + i, m / 2 + i);
            builder.invert(m / 2 + i, 0     + i);
        }
        // заполнить значения коэффициентов
        for (int i = 1; i < F.length; i++) 
        {
            // заполнить значения коэффициентов
            builder.invert(F[i], F[F.length - i]); 
        }
        // сохранить созданную таблицу и указать единичный элемент
        this.matrix = builder.toMatrix(); one = Vector.ones(m);
    }
    // тип нормального базиса
    public final int type() { return T; }

    // сравнение полей
    public final boolean equals(NormField other)
    {
        // сравнение полей
		return m() == other.m() && T == other.T;
    }
    // сравнение полей
    @Override public boolean equals(Object other)
    {
        // проверить совпадение экземпляров
		if (other == this) return true;

        // проверить тип элемента
		if (!(other instanceof NormField)) return false;

		// сравнить значения элементов
		return equals((NormField)other);
    }
    // получить хэш-код объекта
    @Override public int hashCode() { return m() ^ T; }

    //////////////////////////////////////////////////////////////////////
    // Операции мультипликативной группы
    ///////////////////////////////////////////////////////////////////////
    @Override public final Vector one () { return one;  }

    @Override public final Vector invert(Vector a)
    {
        // указать начальные условия
        Vector b = a; int m1 = m() - 1; int mask = 1 << 31; 
        
        // найти старший установленный бит
        for (; mask != 0 && (m1 & mask) == 0; mask >>>= 1) {} mask >>>= 1; 
        
        // для всех битов числа m - 1
        for (int k = 1; mask != 0; mask >>>= 1)
        {
            // вычислить c = b^{2^k}
            Vector c = b; for (int j = 1; j <= k; j++) c = sqr(c);

            // вычислить b = bc; 
            b = product(b, c); k *= 2; 
            
            // при установке бита вычисдить b = ab^2 
            if ((m1 & mask) != 0) { b = product(sqr(b), a); k++; } 
        }
        return sqr(b);
    }
    @Override public final Vector product(Vector a, Vector b)
    {
        // создать вектор для результата
        VectorBuilder builder = new VectorBuilder(matrix.rows()); 
        
        // создать временные переменные
        Vector shiftA = a; Vector shiftB = b;
        
        // для всех координат
        for (int i = 0; i < matrix.rows(); i++)
        {
            // выполнить вычисления
            builder.set(i, shiftA.product(matrix).product(shiftB));
            
            // выполнить сдвиг
            shiftA = shiftA.rcl(1); shiftB = shiftB.rcl(1);
        }
        // вернуть результат
        return builder.toVector(); 
    }
    // возведение в квадрат элемента
    @Override public final Vector sqr(Vector a) { return a.rcr(1); } 

    // вычисление квадратного корня
    @Override public final Vector sqrt(Vector a) { return a.rcl(1); } 

    //////////////////////////////////////////////////////////////////////
    // Специальные функции
    ///////////////////////////////////////////////////////////////////////
    @Override public final int trace(Vector a) { return a.product(one); }

    // корень z квадратного уравнения z^2 + z = beta
    @Override public final Vector quadratic_root(Vector beta)
    {
        // создать буфер для вектора
        VectorBuilder builder = new VectorBuilder(m()); builder.set(0, 0);
        
        // для всех битов
        for (int i = 1, bit = 0; i < m(); i++)
        {
            // вычислить значение бита
            builder.set(i, bit = bit ^ beta.get(i)); 
        }
        // создать вектор
        Vector z = builder.toVector();
        
        // проверить выполнение условия
        return (beta.equals(add(sqr(z), z))) ? z : null; 
    }
}
