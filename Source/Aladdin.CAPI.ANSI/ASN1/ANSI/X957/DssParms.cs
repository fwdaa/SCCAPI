using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

// DssParms ::= SEQUENCE {
//		p            INTEGER,
//		q            INTEGER,
//		g            INTEGER
// }

namespace Aladdin.ASN1.ANSI.X957
{
	[Serializable]
	public class DssParms : Sequence
	{
		// информация о структуре
		private static readonly ObjectInfo[] info = new ObjectInfo[] { 

			new ObjectInfo(new ObjectCreator<Integer>().Factory(), Cast.N), 
			new ObjectInfo(new ObjectCreator<Integer>().Factory(), Cast.N), 
			new ObjectInfo(new ObjectCreator<Integer>().Factory(), Cast.N), 
		}; 
		// конструктор при сериализации
        protected DssParms(SerializationInfo info, StreamingContext context) : base(info, context) {}

		// конструктор при раскодировании
		public DssParms(IEncodable encodable) : base(encodable, info) {}

		// конструктор при закодировании
		public DssParms(Integer p, Integer q, Integer g) : 
			base(info, p, q, g) {}

		public Integer P { get { return (Integer)this[0]; } }
		public Integer Q { get { return (Integer)this[1]; } }
		public Integer G { get { return (Integer)this[2]; } }

        // идентификатор набора параметры ключей 
        public OctetString GetDomainID() 
        { 
            // выделить память для идентификатора
            byte[] id = new byte[10]; byte[] encoded = Encoded;
        
            // получить алгоритм хэширования
            using (CAPI.Hash hashAlgorithm = new CAPI.ANSI.Hash.SHA1())
            { 
                // выполнить хэширование
                byte[] hash = hashAlgorithm.HashData(encoded, 0, encoded.Length); 
        
                // вычислить идентификатор
                for (int i = 0; i < id.Length; i++) id[i] = (byte)(hash[i] ^ hash[10 + i]); 
            }        
            // вернуть идентификатор
            return new OctetString(id); 
        }
        ////////////////////////////////////////////////////////////////////////////
	    // Именованные параметры
        ////////////////////////////////////////////////////////////////////////////
	    private static readonly Math.BigInteger Ephemeral_P = 
            new Math.BigInteger(1, new byte[] {
		    (byte)0x87, (byte)0x10, (byte)0xfa, (byte)0x72, 
            (byte)0x11, (byte)0xb8, (byte)0x1f, (byte)0x26, 
		    (byte)0x78, (byte)0x8c, (byte)0xfa, (byte)0xcb, 
            (byte)0x99, (byte)0x01, (byte)0xa0, (byte)0xbd,
		    (byte)0x39, (byte)0xc8, (byte)0x54, (byte)0xef, 
            (byte)0x35, (byte)0x68, (byte)0x3a, (byte)0x2a, 
		    (byte)0xb7, (byte)0x0c, (byte)0x0a, (byte)0xc9, 
            (byte)0xed, (byte)0x62, (byte)0x5c, (byte)0x16,
		    (byte)0x97, (byte)0xe4, (byte)0x56, (byte)0x8c, 
            (byte)0x69, (byte)0xeb, (byte)0xce, (byte)0xda, 
		    (byte)0x46, (byte)0x8a, (byte)0xcc, (byte)0x9e, 
            (byte)0x77, (byte)0x7f, (byte)0x47, (byte)0x46,
		    (byte)0x6d, (byte)0x5a, (byte)0xcb, (byte)0xc6, 
            (byte)0x87, (byte)0xcc, (byte)0x0f, (byte)0x0d, 
		    (byte)0xea, (byte)0x7f, (byte)0xe9, (byte)0x4d, 
            (byte)0x80, (byte)0x94, (byte)0x76, (byte)0xe7,
		    (byte)0x33, (byte)0x10, (byte)0xd5, (byte)0xb0, 
            (byte)0xb5, (byte)0x28, (byte)0x06, (byte)0xcf, 
		    (byte)0x96, (byte)0x9d, (byte)0x48, (byte)0x64, 
            (byte)0x7b, (byte)0x7d, (byte)0x5e, (byte)0x41,
		    (byte)0x49, (byte)0x20, (byte)0x2d, (byte)0xfe, 
            (byte)0x79, (byte)0x14, (byte)0xce, (byte)0x62, 
		    (byte)0x5a, (byte)0xfd, (byte)0x77, (byte)0x20, 
            (byte)0x19, (byte)0xbb, (byte)0xaf, (byte)0xef,
		    (byte)0xba, (byte)0x81, (byte)0x03, (byte)0x6c, 
            (byte)0xb0, (byte)0xa1, (byte)0x05, (byte)0x98, 
		    (byte)0xdc, (byte)0x7b, (byte)0xc0, (byte)0xef, 
            (byte)0x6f, (byte)0x4d, (byte)0x9a, (byte)0xf8,
		    (byte)0x62, (byte)0x7e, (byte)0x06, (byte)0xc1, 
            (byte)0x76, (byte)0x1d, (byte)0x3b, (byte)0x38, 
		    (byte)0xe9, (byte)0x5c, (byte)0x86, (byte)0x0e, 
            (byte)0x96, (byte)0x90, (byte)0x2a, (byte)0x6d,
	    });
	    private static readonly Math.BigInteger Ephemeral_G = 
            new Math.BigInteger(1, new byte[] {
		    (byte)0x20, (byte)0x82, (byte)0xf3, (byte)0x07, 
            (byte)0xae, (byte)0x29, (byte)0x67, (byte)0x63, 
		    (byte)0x40, (byte)0x78, (byte)0x5d, (byte)0xc5, 
            (byte)0xfd, (byte)0x4e, (byte)0xa2, (byte)0x0d,
		    (byte)0x14, (byte)0x79, (byte)0x6b, (byte)0x8c, 
            (byte)0x13, (byte)0x55, (byte)0xb2, (byte)0x0f, 
		    (byte)0x9c, (byte)0x27, (byte)0x79, (byte)0x74, 
            (byte)0xf5, (byte)0x90, (byte)0x10, (byte)0xa4,
		    (byte)0xe6, (byte)0xb5, (byte)0x97, (byte)0x59, 
            (byte)0x9e, (byte)0x58, (byte)0x0f, (byte)0xf1, 
		    (byte)0x27, (byte)0xcc, (byte)0xcc, (byte)0x05, 
            (byte)0xbd, (byte)0x93, (byte)0xa8, (byte)0x87,
		    (byte)0xe0, (byte)0x18, (byte)0xdc, (byte)0x14, 
            (byte)0x94, (byte)0x5e, (byte)0x58, (byte)0x2a, 
		    (byte)0xae, (byte)0xa0, (byte)0x11, (byte)0x56, 
            (byte)0x44, (byte)0x4e, (byte)0x15, (byte)0x17,
		    (byte)0x18, (byte)0x35, (byte)0xdb, (byte)0xaa, 
            (byte)0x65, (byte)0x34, (byte)0x0f, (byte)0x44, 
		    (byte)0x54, (byte)0xf8, (byte)0x40, (byte)0x7e, 
            (byte)0x2c, (byte)0x12, (byte)0xe2, (byte)0x10,
		    (byte)0xb7, (byte)0x7f, (byte)0x23, (byte)0xe6, 
            (byte)0x11, (byte)0x36, (byte)0x4d, (byte)0x7b, 
		    (byte)0x99, (byte)0xdb, (byte)0x0d, (byte)0x73, 
            (byte)0x0a, (byte)0x86, (byte)0x5d, (byte)0xb3,
		    (byte)0x56, (byte)0x85, (byte)0x98, (byte)0x2b, 
            (byte)0xf7, (byte)0xb5, (byte)0x30, (byte)0x92, 
		    (byte)0xfd, (byte)0x30, (byte)0x89, (byte)0xe8, 
            (byte)0xd3, (byte)0xb0, (byte)0x49, (byte)0x3d,
		    (byte)0x03, (byte)0x47, (byte)0x1c, (byte)0x14, 
            (byte)0x00, (byte)0x7d, (byte)0x1f, (byte)0x6d, 
		    (byte)0x07, (byte)0xca, (byte)0x79, (byte)0x12, 
            (byte)0xc9, (byte)0x34, (byte)0xf3, (byte)0xc4,
	    });
	    private static readonly Math.BigInteger Ephemeral_Q = 
            new Math.BigInteger(1, new byte[] {
		    (byte)0x85, (byte)0x77, (byte)0xf6, (byte)0xe5, 
            (byte)0xbc, (byte)0xeb, (byte)0x2d, (byte)0x3e,
		    (byte)0x90, (byte)0x21, (byte)0x39, (byte)0x47, 
            (byte)0x20, (byte)0xce, (byte)0xae, (byte)0x7c,
		    (byte)0x14, (byte)0x3d, (byte)0xe5, (byte)0xa1,
	    });
	    // экземпляр параметров
	    public static readonly DssParms Ephemeral = new DssParms(
		    new Integer(Ephemeral_P), new Integer(Ephemeral_Q), new Integer(Ephemeral_G) 
	    ); 
	    private static readonly Math.BigInteger JCA_P512 = 
            new Math.BigInteger(1, new byte[] {
				0xfc, 0xa6, 0x82, 0xce, 0x8e, 0x12, 0xca, 0xba, 
				0x26, 0xef, 0xcc, 0xf7, 0x11, 0x0e, 0x52, 0x6d, 
				0xb0, 0x78, 0xb0, 0x5e, 0xde, 0xcb, 0xcd, 0x1e, 
				0xb4, 0xa2, 0x08, 0xf3, 0xae, 0x16, 0x17, 0xae, 
				0x01, 0xf3, 0x5b, 0x91, 0xa4, 0x7e, 0x6d, 0xf6, 
				0x34, 0x13, 0xc5, 0xe1, 0x2e, 0xd0, 0x89, 0x9b, 
				0xcd, 0x13, 0x2a, 0xcd, 0x50, 0xd9, 0x91, 0x51, 
				0xbd, 0xc4, 0x3e, 0xe7, 0x37, 0x59, 0x2e, 0x17
			});
	    private static readonly Math.BigInteger JCA_G512 = 
            new Math.BigInteger(1, new byte[] {
				0x67, 0x84, 0x71, 0xb2, 0x7a, 0x9c, 0xf4, 0x4e, 
				0xe9, 0x1a, 0x49, 0xc5, 0x14, 0x7d, 0xb1, 0xa9, 
				0xaa, 0xf2, 0x44, 0xf0, 0x5a, 0x43, 0x4d, 0x64, 
				0x86, 0x93, 0x1d, 0x2d, 0x14, 0x27, 0x1b, 0x9e, 
				0x35, 0x03, 0x0b, 0x71, 0xfd, 0x73, 0xda, 0x17, 
				0x90, 0x69, 0xb3, 0x2e, 0x29, 0x35, 0x63, 0x0e, 
				0x1c, 0x20, 0x62, 0x35, 0x4d, 0x0d, 0xa2, 0x0a,
				0x6c, 0x41, 0x6e, 0x50, 0xbe, 0x79, 0x4c, 0xa4, 	    
			});
	    private static readonly Math.BigInteger JCA_Q512 = 
            new Math.BigInteger(1, new byte[] {
				0x96, 0x2e, 0xdd, 0xcc, 0x36, 0x9c, 0xba, 0x8e, 
				0xbb, 0x26, 0x0e, 0xe6, 0xb6, 0xa1, 0x26, 0xd9, 
				0x34, 0x6e, 0x38, 0xc5	    
			});
	    // экземпляр параметров
	    public static readonly DssParms JCA512 = new DssParms(
		    new Integer(JCA_P512), new Integer(JCA_Q512), new Integer(JCA_G512) 
	    ); 
	    private static readonly Math.BigInteger JCA_P768 = 
            new Math.BigInteger(1, new byte[] {
				0xe9, 0xe6, 0x42, 0x59, 0x9d, 0x35, 0x5f, 0x37, 
				0xc9, 0x7f, 0xfd, 0x35, 0x67, 0x12, 0x0b, 0x8e, 
				0x25, 0xc9, 0xcd, 0x43, 0xe9, 0x27, 0xb3, 0xa9, 
				0x67, 0x0f, 0xbe, 0xc5, 0xd8, 0x90, 0x14, 0x19, 
				0x22, 0xd2, 0xc3, 0xb3, 0xad, 0x24, 0x80, 0x09, 
				0x37, 0x99, 0x86, 0x9d, 0x1e, 0x84, 0x6a, 0xab, 
				0x49, 0xfa, 0xb0, 0xad, 0x26, 0xd2, 0xce, 0x6a, 
				0x22, 0x21, 0x9d, 0x47, 0x0b, 0xce, 0x7d, 0x77, 
				0x7d, 0x4a, 0x21, 0xfb, 0xe9, 0xc2, 0x70, 0xb5, 
				0x7f, 0x60, 0x70, 0x02, 0xf3, 0xce, 0xf8, 0x39, 
				0x36, 0x94, 0xcf, 0x45, 0xee, 0x36, 0x88, 0xc1, 
				0x1a, 0x8c, 0x56, 0xab, 0x12, 0x7a, 0x3d, 0xaf
			});
	    private static readonly Math.BigInteger JCA_G768 = 
            new Math.BigInteger(1, new byte[] {
				0x30, 0x47, 0x0a, 0xd5, 0xa0, 0x05, 0xfb, 0x14, 
				0xce, 0x2d, 0x9d, 0xcd, 0x87, 0xe3, 0x8b, 0xc7, 
				0xd1, 0xb1, 0xc5, 0xfa, 0xcb, 0xae, 0xcb, 0xe9, 
				0x5f, 0x19, 0x0a, 0xa7, 0xa3, 0x1d, 0x23, 0xc4, 
				0xdb, 0xbc, 0xbe, 0x06, 0x17, 0x45, 0x44, 0x40, 
				0x1a, 0x5b, 0x2c, 0x02, 0x09, 0x65, 0xd8, 0xc2, 
				0xbd, 0x21, 0x71, 0xd3, 0x66, 0x84, 0x45, 0x77, 
				0x1f, 0x74, 0xba, 0x08, 0x4d, 0x20, 0x29, 0xd8, 
				0x3c, 0x1c, 0x15, 0x85, 0x47, 0xf3, 0xa9, 0xf1, 
				0xa2, 0x71, 0x5b, 0xe2, 0x3d, 0x51, 0xae, 0x4d, 
				0x3e, 0x5a, 0x1f, 0x6a, 0x70, 0x64, 0xf3, 0x16, 
				0x93, 0x3a, 0x34, 0x6d, 0x3f, 0x52, 0x92, 0x52	    
			});
	    private static readonly Math.BigInteger JCA_Q768 = 
            new Math.BigInteger(1, new byte[] {
				0x9c, 0xdb, 0xd8, 0x4c, 0x9f, 0x1a, 0xc2, 0xf3, 
				0x8d, 0x0f, 0x80, 0xf4, 0x2a, 0xb9, 0x52, 0xe7, 
				0x33, 0x8b, 0xf5, 0x11	    
			});
	    // экземпляр параметров
	    public static readonly DssParms JCA768 = new DssParms(
		    new Integer(JCA_P768), new Integer(JCA_Q768), new Integer(JCA_G768) 
	    ); 
	    private static readonly Math.BigInteger JCA_P1024 = 
            new Math.BigInteger(1, new byte[] {
				0xfd, 0x7f, 0x53, 0x81, 0x1d, 0x75, 0x12, 0x29, 
				0x52, 0xdf, 0x4a, 0x9c, 0x2e, 0xec, 0xe4, 0xe7, 
				0xf6, 0x11, 0xb7, 0x52, 0x3c, 0xef, 0x44, 0x00, 
				0xc3, 0x1e, 0x3f, 0x80, 0xb6, 0x51, 0x26, 0x69, 
				0x45, 0x5d, 0x40, 0x22, 0x51, 0xfb, 0x59, 0x3d, 
				0x8d, 0x58, 0xfa, 0xbf, 0xc5, 0xf5, 0xba, 0x30, 
				0xf6, 0xcb, 0x9b, 0x55, 0x6c, 0xd7, 0x81, 0x3b, 
				0x80, 0x1d, 0x34, 0x6f, 0xf2, 0x66, 0x60, 0xb7, 
				0x6b, 0x99, 0x50, 0xa5, 0xa4, 0x9f, 0x9f, 0xe8, 
				0x04, 0x7b, 0x10, 0x22, 0xc2, 0x4f, 0xbb, 0xa9, 
				0xd7, 0xfe, 0xb7, 0xc6, 0x1b, 0xf8, 0x3b, 0x57, 
				0xe7, 0xc6, 0xa8, 0xa6, 0x15, 0x0f, 0x04, 0xfb, 
				0x83, 0xf6, 0xd3, 0xc5, 0x1e, 0xc3, 0x02, 0x35, 
				0x54, 0x13, 0x5a, 0x16, 0x91, 0x32, 0xf6, 0x75, 
				0xf3, 0xae, 0x2b, 0x61, 0xd7, 0x2a, 0xef, 0xf2, 
				0x22, 0x03, 0x19, 0x9d, 0xd1, 0x48, 0x01, 0xc7			
			});
	    private static readonly Math.BigInteger JCA_G1024 = 
            new Math.BigInteger(1, new byte[] {
				0xf7, 0xe1, 0xa0, 0x85, 0xd6, 0x9b, 0x3d, 0xde, 
				0xcb, 0xbc, 0xab, 0x5c, 0x36, 0xb8, 0x57, 0xb9, 
				0x79, 0x94, 0xaf, 0xbb, 0xfa, 0x3a, 0xea, 0x82, 
				0xf9, 0x57, 0x4c, 0x0b, 0x3d, 0x07, 0x82, 0x67, 
				0x51, 0x59, 0x57, 0x8e, 0xba, 0xd4, 0x59, 0x4f, 
				0xe6, 0x71, 0x07, 0x10, 0x81, 0x80, 0xb4, 0x49, 
				0x16, 0x71, 0x23, 0xe8, 0x4c, 0x28, 0x16, 0x13, 
				0xb7, 0xcf, 0x09, 0x32, 0x8c, 0xc8, 0xa6, 0xe1, 
				0x3c, 0x16, 0x7a, 0x8b, 0x54, 0x7c, 0x8d, 0x28, 
				0xe0, 0xa3, 0xae, 0x1e, 0x2b, 0xb3, 0xa6, 0x75, 
				0x91, 0x6e, 0xa3, 0x7f, 0x0b, 0xfa, 0x21, 0x35, 
				0x62, 0xf1, 0xfb, 0x62, 0x7a, 0x01, 0x24, 0x3b, 
				0xcc, 0xa4, 0xf1, 0xbe, 0xa8, 0x51, 0x90, 0x89, 
				0xa8, 0x83, 0xdf, 0xe1, 0x5a, 0xe5, 0x9f, 0x06, 
				0x92, 0x8b, 0x66, 0x5e, 0x80, 0x7b, 0x55, 0x25, 
				0x64, 0x01, 0x4c, 0x3b, 0xfe, 0xcf, 0x49, 0x2a
			});
	    private static readonly Math.BigInteger JCA_Q1024 = 
            new Math.BigInteger(1, new byte[] {
				0x97, 0x60, 0x50, 0x8f, 0x15, 0x23, 0x0b, 0xcc, 
				0xb2, 0x92, 0xb9, 0x82, 0xa2, 0xeb, 0x84, 0x0b, 
				0xf0, 0x58, 0x1c, 0xf5    
			});
	    // экземпляр параметров
	    public static readonly DssParms JCA1024 = new DssParms(
		    new Integer(JCA_P1024), new Integer(JCA_Q1024), new Integer(JCA_G1024) 
	    ); 
	    // таблица именованных параметров
	    private static readonly Dictionary<OctetString, DssParms> set = 
		    new Dictionary<OctetString, DssParms>(); 
	    static DssParms() 
        {
            // добавить именованные параметры в список
            set.Add(Ephemeral.GetDomainID(), Ephemeral); 
            set.Add(JCA512   .GetDomainID(), JCA512   ); 
            set.Add(JCA768   .GetDomainID(), JCA768   ); 
            set.Add(JCA1024  .GetDomainID(), JCA1024  ); 
	    }
	    // получить именованные параметры
	    public static DssParms Parameters(OctetString oid) { return set[oid]; } 
    }
}
